diff --git a/src/error.rs b/src/error.rs
index a3f2b76..aed157c 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -99,6 +99,19 @@ pub trait Error: Debug + Display {
         TypeId::of::<Self>()
     }
 
+    #[doc(hidden)]
+    #[unstable(
+        feature = "error_type_id",
+        reason = "this is memory-unsafe to override in user code",
+        issue = "60784"
+    )]
+    fn type_name(&self) -> &'static str
+    where
+        Self: 'static,
+    {
+        core::any::type_name::<Self>()
+    }
+
     /// ```
     /// if let Err(e) = "xc".parse::<u32>() {
     ///     // Print `e` itself, no need for description().
diff --git a/src/fmt/mod.rs b/src/fmt/mod.rs
index 1324fb6..a98bf88 100644
--- a/src/fmt/mod.rs
+++ b/src/fmt/mod.rs
@@ -18,7 +18,7 @@ mod float;
 #[cfg(no_fp_fmt_parse)]
 mod nofloat;
 mod num;
-mod rt;
+pub mod rt;

 #[stable(feature = "fmt_flags_align", since = "1.28.0")]
 #[cfg_attr(not(test), rustc_diagnostic_item = "Alignment")]
diff --git a/src/fmt/rt.rs b/src/fmt/rt.rs
index 92626fe..c220923 100644
--- a/src/fmt/rt.rs
+++ b/src/fmt/rt.rs
@@ -89,7 +89,7 @@ pub struct Argument<'a> {
 #[rustc_diagnostic_item = "ArgumentMethods"]
 impl<'a> Argument<'a> {
     #[inline(always)]
-    fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> Argument<'b> {
+    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> Argument<'b> {
         // SAFETY: `mem::transmute(x)` is safe because
         //     1. `&'b T` keeps the lifetime it originated with `'b`
         //              (so as to not have an unbounded lifetime)
