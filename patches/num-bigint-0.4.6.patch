diff --git a/src/biguint/multiplication.rs b/src/biguint/multiplication.rs
index e9d2138..b09a29f 100644
--- a/src/biguint/multiplication.rs
+++ b/src/biguint/multiplication.rs
@@ -64,7 +64,7 @@ fn bigint_from_slice(slice: &[BigDigit]) -> BigInt {
 /// Three argument multiply accumulate:
 /// acc += b * c
 #[allow(clippy::many_single_char_names)]
-fn mac3(mut acc: &mut [BigDigit], mut b: &[BigDigit], mut c: &[BigDigit]) {
+pub fn mac3(mut acc: &mut [BigDigit], mut b: &[BigDigit], mut c: &[BigDigit]) {
     // Least-significant zeros have no effect on the output.
     if let Some(&0) = b.first() {
         if let Some(nz) = b.iter().position(|&d| d != 0) {
diff --git a/src/biguint.rs b/src/biguint.rs
index 196fa32..6927258 100644
--- a/src/biguint.rs
+++ b/src/biguint.rs
@@ -29,6 +29,7 @@ mod shift;
 
 pub(crate) use self::convert::to_str_radix_reversed;
 pub use self::iter::{U32Digits, U64Digits};
+pub use multiplication::mac3;
 
 /// A big unsigned integer type.
 pub struct BigUint {
@@ -1068,7 +1069,7 @@ impl num_traits::ToBytes for BigUint {
     }
 }
 
-pub(crate) trait IntDigits {
+pub trait IntDigits {
     fn digits(&self) -> &[BigDigit];
     fn digits_mut(&mut self) -> &mut Vec<BigDigit>;
     fn normalize(&mut self);
diff --git a/src/lib.rs b/src/lib.rs
index 6e47479..89377a9 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -213,6 +213,7 @@ impl<T> fmt::Display for TryFromBigIntError<T> {
 
 pub use crate::biguint::BigUint;
 pub use crate::biguint::ToBigUint;
+pub use crate::biguint::IntDigits;
 pub use crate::biguint::U32Digits;
 pub use crate::biguint::U64Digits;
 
@@ -220,6 +221,8 @@ pub use crate::bigint::BigInt;
 pub use crate::bigint::Sign;
 pub use crate::bigint::ToBigInt;
 
+pub use crate::biguint::mac3;
+
 #[cfg(feature = "rand")]
 #[cfg_attr(docsrs, doc(cfg(feature = "rand")))]
 pub use crate::bigrand::{RandBigInt, RandomBits, UniformBigInt, UniformBigUint};
